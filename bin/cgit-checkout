#!/usr/bin/env node
const spawn = require('cross-spawn');
const child_process = require('child_process')
const log = require('../tools/log')
const mini = require('minimist')
const getBranchInfo = require('../src/getBranchInfo')
const argvs = mini(process.argv)
const ARGV_INIT = argvs['_']
const hasConflict = require('../src/hasConflict')

// 保存 + 提交
const add_commit = (msg) => {
  spawn.sync('git', ['add', '.'], { stdio: 'inherit' })
  spawn.sync('git', ['commit', '-m', msg], { stdio: 'inherit' })
  log.success(' SUCCESS ', msg)
}

// 切换分支
const checkout = (_branch) => {
  try {
    child_process.execSync(`git checkout ${_branch}`, { encoding: 'utf8' });
    log.info(' CHECKOUT ', `切换到分支${_branch}`)
  } catch (e) {
    log.error('\n Error ', `不存在分支，请先新建分支， git checkout -b ${_branch}`)
    process.exit()
  }
}


// 是否有对应的远程分支
const {currentBranch, branchList} = getBranchInfo()

const hasRemoteBranch = (b) => {
  if (branchList.includes(`remotes/origin/${b}`)) {
    return true
  }
  return false
}

const pull_status = (_branch, next) => {
  // 如果远程有分支 下一步则进行拉取最新代码 否则退出
  if (hasRemoteBranch(_branch)) {
    // 执行pull
    spawn.sync('git', ['pull'], { stdio: 'inherit' })
    log.success('\n SUCCESS ', 'pull',  _branch)
    hasConflict()
  } else {
    next && next()
  }
}

const BRANCH = ARGV_INIT[2]

if(argvs['h']) {
  log.tip(' HELP ',
   '', 
   '-m xx    保存信息提交',
   'cgit checkout [branch] -m "xxx" 保存信息切换到 [branch] 分支，并拉取最新代码'
  )
  process.exit()
}
const MSG = argvs['m']
if(MSG) {
	add_commit(MSG)
}

if(BRANCH) {
	checkout(BRANCH)
	pull_status(BRANCH, ()=> {
		process.exit()
	})
}

