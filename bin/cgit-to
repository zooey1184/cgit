#!/usr/bin/env node

const spawn = require('cross-spawn');
const child_process = require('child_process')
const mini = require('minimist')
// 工具函数
const log = require('../tools/log')
// 内部方法
const getBranchInfo = require('../src/getBranchInfo')
const getGitConfig = require('../src/getConfig')
const hasConflict = require('../src/hasConflict')
const hook = require('../src/hook')
const paths = require('../src/path')
const stageHook = require('../src/stageHook')
const getTag = require('../src/getTagfromParams')

// 参数信息
const argvs = mini(process.argv)
const ARGV_INIT = argvs['_'] // 不带参数的解析

// 分支信息
const BRANCH = argvs['b'] || (ARGV_INIT.length > 2 ? ARGV_INIT[2] : '@ME')
const MSG = argvs['m'] || (ARGV_INIT.length > 3 ? ARGV_INIT[3] : 'update')
const TAG = argvs['t'] || undefined

const cgitConfig = paths.cgitConfig
const {currentBranch, branchList} = getBranchInfo()


if(argvs['h']) {
  log.tip(' HELP ',
   '', 
   'cgit to [branch] -m "message" 保存message并切换到branch分支',
	 '-b  指定分支：cgit to -b master',
	 '-m  提交信息：cgit to -m "xxx"',
	 'ps: 如果没有[branch] | -b  即：没有分支信息，则表示为当前分支',
	 'ps: 如果没有 -m  即：没有提交信息，则表示提交信息为 update ',
	 '',
	 '-t 生成tag 并 提交到远程，使用配置',
   '	-t [date|l+1|m+1|s+1] 快捷生成模板tag并推送',
   '	-t --tag xxx 快捷生成xxx tag并推送'
	)
	process.exit()
}

// 是否有对应的远程分支
const hasRemoteBranch = (b) => {
  if (branchList.includes(`remotes/origin/${b}`)) {
    return true
  }
  return false
}

// 保存 + 提交
const add_commit = (msg) => {
  spawn.sync('git', ['add', '.'], { stdio: 'inherit' })
  spawn.sync('git', ['commit', '-m', msg], { stdio: 'inherit' })
  log.success('\n SUCCESS ', `add & commit: ${msg}`)
}

// 拉取最新代码 + 拿取状态
const pull_status = (_branch, next) => {
  // 如果远程有分支 下一步则进行拉取最新代码 否则退出
  if (hasRemoteBranch(_branch)) {
    const info = getBranchInfo()
    // 是否有before钩子需要执行
    if(hook.hasHook('beforePull')) {
      hook.publish('beforePull', info.currentBranch, {from: currentBranch, to: BRANCH})
    }

    // 执行pull
    spawn.sync('git', ['pull'], { stdio: 'inherit' })
    log.success('\n pull success ', _branch)
    // 是否有after钩子需要执行
    if(hook.hasHook('afterPush')) {
      hook.publish('afterPush', info.currentBranch, {from: currentBranch, to: BRANCH})
    }
    
    hasConflict()
  } else {
    next && next()
  }
}

// 切换分支
const checkout = (_branch) => {
  try {
    child_process.execSync(`git checkout ${_branch}`, { encoding: 'utf8' });
    log.info(' CHECKOUT ', `切换到分支${_branch}`)
  } catch (e) {
    log.error('\n Error ', `不存在分支，请先新建分支， git checkout -b ${_branch}`)
    process.exit()
  }
}


const merge = () => {
  const info = getBranchInfo()
  try {
    if(hook.hasHook('beforeMerge')) {
      hook.publish('beforeMerge', info.currentBranch, {from: currentBranch, to: BRANCH})
    }

    child_process.execSync(`git merge ${currentBranch}`, { encoding: 'utf8' });

    if(hook.hasHook('afterMerge')) {
      hook.publish('afterMerge',  info.currentBranch, {from: currentBranch, to: BRANCH})
    }
  } catch (e) {
    log.error(' Error ', '存在冲突')
    hasConflict()
    console.log(e);
  } finally {
    hasConflict()
  }
}


const pushTag = () => {
	const all_tags = child_process.execSync('git tag -l', { encoding: 'utf8' });
	if(!all_tags) return

  let newTag = getTag(all_tags, BRANCH)
  const config = getGitConfig()
  if(newTag) {
    spawn.sync('git', ['tag', '-a', newTag, '-m', `"提交人: ${config['user.name']}`], { stdio: 'inherit' })
    spawn.sync('git', ['push', 'origin', newTag], { stdio: 'inherit' })
  }
}


// 推送到远程分支
const push = (_branch, next) => {
  if (hasRemoteBranch(_branch)) {
    try {
      const info = getBranchInfo()
      log.success('\n 远程分支 ', _branch, '\n开始推送，请勿中断')
      // 推送前钩子
      if(hook.hasHook('beforePush')) {
        hook.publish('beforePush', info.currentBranch, {from: currentBranch, to: BRANCH})
      }
      spawn.sync('git', ['push', 'origin', _branch], { stdio: 'inherit' })

      // 推送后钩子
      if(hook.hasHook('afterPush')) {
        hook.publish('afterPush', info.currentBranch, {from: currentBranch, to: BRANCH})
      }

      if(TAG) {
        pushTag()
      }
    } catch (e) {
      log.error(' Error ', `不能提交到分支${_branch}`, e.toString())
    }
  } else {
    log.wran(`\n不存在远程分支${_branch}`)
    next && next()
  }
}

// 注入钩子
cgitConfig && cgitConfig.hook && stageHook(cgitConfig.hook, hook)


// ********情况一：当前分支与切换分支是同一个分支 *********** //
if (BRANCH && (BRANCH == currentBranch || BRANCH == '@ME')) {
  // 当前分支与 需切换分支一致
  add_commit(MSG)
  pull_status(currentBranch, () => {
    process.exit()
  })
  add_commit('update')
  push(currentBranch, () => {
    process.exit()
  })
  process.exit()
}



// // ******** 情况二：当前分支与切换分支不是同一个分支 *******/
if (BRANCH && BRANCH != currentBranch) {
  // 第一步：本地拉取最新代码 =》 提交信息 =》 推送本地到远程
  pull_status(currentBranch)
  add_commit(MSG)
  push(currentBranch)

  // 第二步：切换到需要的分支，拉取最新代码
  checkout(BRANCH)
  pull_status(BRANCH)

	// 第三步：合并本地分支代码，查看冲突
	if(!argvs['no-mp']) {
		merge()
		hasConflict()

    // 如果没有冲突 进行第四步，提交信息，推送到远程
    pull_status(BRANCH)
		add_commit(`merge: ${currentBranch}`)
		push(BRANCH)
		checkout(currentBranch)
	}
  process.exit()
}







