#!/usr/bin/env node
const spawn = require('cross-spawn');
const child_process = require('child_process')
const mini = require('minimist')
const getGitConfig = require('../src/getConfig')
// 工具函数
const log = require('../tools/log')
const {dateTag, versionTag} = require('../src/getTag')
const argvs = mini(process.argv)
const ARGV_INIT = argvs['_']


const all_tags = child_process.execSync('git tag -l', { encoding: 'utf8' });

if(argvs['h']) {
  log.tip(' TIP ',
   '', 
   '-l 查看tag信息',
	 '-l xx 查看包含 xx 信息的全部tag',
	 '-l -a 如果tag 太多，返回全部tag，默认返回前10个',
	 '-M (--mode)[date|version]， 与 -T 一起用',
	 '	- 创建tag标签 date为以日期为模板 => 20.06.01.01',
	 '	- version 以通用版本为模板 => 1.0.0',
	 '',
	 '-T (--type)与-M 一起用，模板的类型',
	 '	-M date -T YY.MM.DD => [YYYY|YY], [MM|M], [DD|D]',
	 '	-M date -T YYYY.M.D => 2020.6.1',
	 '	-M version -T [l+1|m+1|s+1] => 大版本更新+1，中版本，小版本',
	 '	-M version -T s+2 => 原版本v1.0.1 => 更新后 v1.0.3 (小版本更新+2)',
	 '	-M version -T l+1 => 原版本v1.0.1 => 更新后 v2.0.0 (大版本更新+1)',
	 '',
	 '-p 推送到远程 cgit tag -M date -T mm.d -p',
	 '	- 或 推送到远程 或 cgit tag push -M date -T mm.d'
	)
	process.exit()
}


if(!all_tags) {
	log.tip(' TIP ', '没有tag信息，先新建一个吧')
	process.exit()
}

if(argvs['l']) {
	if(all_tags) {
		const allTags = all_tags.split('\n')

		if(typeof argvs['l'] === 'boolean') {
			if(allTags.length < 10) {
				log.tip(' TIP ', '', all_tags)
			} else {
				if(argvs['a']) {
					log.tip(' TIP ','', all_tags)
					return
				}
				log.tip(' TIP ', allTags.reverse().filter((_,index) => index<10).join('\n'))
				log.tip(' TIP ', '\n你可以使用 cgit tag -l -a 获取全部tag信息', '你可以使用 cgit tag -l xx 搜索 xx 标签')
			}
		} else {
			log.tip(' TIP ','', allTags.reverse().filter((item) => item.match(new RegExp(argvs['l']))).join('\n'))
		}
		log.tip(`\nYou can use tag: `, '', dateTag(all_tags), 'OR: ', versionTag(all_tags, 's+1'))
	}
	process.exit()
}

let useTag = argvs['tag'] || argvs['a'] || 'v1.0.0'
const config = getGitConfig()
const MSG = argvs['m'] || `"提交人: ${config['user.name']}"`

const mode = argvs['mode'] || argvs['M']
if(mode) {
	if(mode === 'date') {
		useTag = dateTag(all_tags, {
			mode: 'date',
			type: argvs['type'] || argvs['T'] || 'YY.MM.DD'
		})
		log.success(' SUCCESS ', `您创建了 ${useTag} 标签`)
		spawn.sync('git', ['tag', '-a', useTag, '-m', MSG], { stdio: 'inherit' })
		process.exit(1)
	}

	if(mode === 'version') {
		let type = argvs['type'] || argvs['T'] || 's+1'
		useTag = versionTag(all_tags, type, {
			mode: 'version',
			type: type
		})
		log.success(' SUCCESS ', `您创建了 ${useTag} 标签`)
		spawn.sync('git', ['tag', '-a', useTag, '-m', MSG], { stdio: 'inherit' })
		process.exit(1)
	}
} else {
	log.success(' SUCCESS ', `您创建了 ${useTag} 标签`)
	spawn.sync('git', ['tag', '-a', useTag, '-m', MSG], { stdio: 'inherit' })
	process.exit(1)
}


if(ARGV_INIT[2]=='push' || argvs['p']) {
	spawn.sync('git', ['push', 'origin', useTag], { stdio: 'inherit' })
	log.success(' SUCCESS ', `推送 ${useTag} 标签`)
}

